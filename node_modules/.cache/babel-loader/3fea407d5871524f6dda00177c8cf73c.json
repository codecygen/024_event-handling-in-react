{"ast":null,"code":"import _slicedToArray from \"/home/gingerbreadcookies/Desktop/024_event-handling-in-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/gingerbreadcookies/Desktop/024_event-handling-in-react/src/components/App.jsx\";\n\nimport React, { useState } from \"react\";\n\nvar App = function App() {\n  var _useState = useState('Mouse not hovered on button!'),\n      _useState2 = _slicedToArray(_useState, 2),\n      headingText = _useState2[0],\n      setHeadingText = _useState2[1];\n\n  var _useState3 = useState('white'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      buttonColor = _useState4[0],\n      setButtonColor = _useState4[1];\n\n  var _useState5 = useState({\n    fName: '',\n    lName: ''\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      fullName = _useState6[0],\n      setFullName = _useState6[1];\n\n  var handleClick = function handleClick() {\n    setHeadingText('Clicked!');\n  };\n\n  var handleMouseOver = function handleMouseOver() {\n    setHeadingText('Mouse Over!');\n    setButtonColor('black');\n  };\n\n  var handleMouseOut = function handleMouseOut() {\n    setHeadingText('Mouse Out!');\n    setButtonColor('white');\n  };\n\n  var handleNameChange = function handleNameChange(e) {\n    var newValue = e.target.value;\n    var inputName = e.target.name;\n    inputName === 'fName' ? setFullName({\n      fName: newValue,\n      lName: fullName.lName\n    }) : setFullName({\n      lName: newValue,\n      fName: fullName.fName\n    });\n  }; // In HTML, elements are responsible of handling their own state.\n  // For example, if you type in an input element, the value will be\n  // equal to the one that you already typed.\n  // In React, however, you have to set the value property to the \n  // Thing you typed manually.\n  // Alternative solution for \"onClick={handleClick}\" for button element\n  // would be to wrap entire thing with form element (input and button elements),\n  // replace \"onClick={handleClick}\" with \"type='submit\", then\n  // in form element, as an attribute add this \"onSubmit={handleClick}\"\n  // In this case you have to pass an argument inside \"handleClick(e)\" function,\n  // Inside it write \"e.preventDefault();\"\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"Hello \", fullName.fName), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"You typed \", fullName.fName, \" \", fullName.lName), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, headingText), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"fName\",\n    placeholder: \"First Name\",\n    onChange: handleNameChange // value={fullName.fName} \n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"lName\",\n    placeholder: \"Last Name\",\n    onChange: handleNameChange // value={fullName.LName} \n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      backgroundColor: buttonColor\n    },\n    onMouseOver: handleMouseOver,\n    onMouseOut: handleMouseOut,\n    onClick: handleClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Submit\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/gingerbreadcookies/Desktop/024_event-handling-in-react/src/components/App.jsx"],"names":["React","useState","App","headingText","setHeadingText","buttonColor","setButtonColor","fName","lName","fullName","setFullName","handleClick","handleMouseOver","handleMouseOut","handleNameChange","e","newValue","target","value","inputName","name","backgroundColor"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAGA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAGhB,kBAAsCD,QAAQ,CAAC,8BAAD,CAA9C;AAAA;AAAA,MAAOE,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAAsCH,QAAQ,CAAC,OAAD,CAA9C;AAAA;AAAA,MAAOI,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAAgCL,QAAQ,CAAC;AACvCM,IAAAA,KAAK,EAAE,EADgC;AAEvCC,IAAAA,KAAK,EAAE;AAFgC,GAAD,CAAxC;AAAA;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AAKA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBP,IAAAA,cAAc,CAAC,UAAD,CAAd;AAED,GAHD;;AAKA,MAAMQ,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BR,IAAAA,cAAc,CAAC,aAAD,CAAd;AACAE,IAAAA,cAAc,CAAC,OAAD,CAAd;AACD,GAHD;;AAKA,MAAMO,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BT,IAAAA,cAAc,CAAC,YAAD,CAAd;AACAE,IAAAA,cAAc,CAAC,OAAD,CAAd;AACD,GAHD;;AAKA,MAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD,EAAO;AAC9B,QAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA1B;AACA,QAAMC,SAAS,GAAGJ,CAAC,CAACE,MAAF,CAASG,IAA3B;AAEAD,IAAAA,SAAS,KAAK,OAAd,GACET,WAAW,CAAC;AAACH,MAAAA,KAAK,EAAES,QAAR;AAAkBR,MAAAA,KAAK,EAAEC,QAAQ,CAACD;AAAlC,KAAD,CADb,GAEIE,WAAW,CAAC;AAACF,MAAAA,KAAK,EAAEQ,QAAR;AAAkBT,MAAAA,KAAK,EAAEE,QAAQ,CAACF;AAAlC,KAAD,CAFf;AAGD,GAPD,CAzBgB,CAkChB;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWE,QAAQ,CAACF,KAApB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAeE,QAAQ,CAACF,KAAxB,OAAgCE,QAAQ,CAACD,KAAzC,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,WAAL,CAHF,eAIE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,WAAW,EAAC,YAHd;AAIE,IAAA,QAAQ,EAAEW,gBAJZ,CAKE;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAYE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,WAAW,EAAC,WAHd;AAIE,IAAA,QAAQ,EAAEA,gBAJZ,CAKE;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,eAoBE;AACE,IAAA,KAAK,EAAE;AAACO,MAAAA,eAAe,EAAEhB;AAAlB,KADT;AAEE,IAAA,WAAW,EAAEO,eAFf;AAGE,IAAA,UAAU,EAAEC,cAHd;AAIE,IAAA,OAAO,EAAEF,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF,CADF;AA4BD,CA5ED;;AA8EA,eAAeT,GAAf","sourcesContent":["import React, {useState} from \"react\";\n\n\nconst App = () => {\n\n\n  const [headingText, setHeadingText] = useState('Mouse not hovered on button!');\n  const [buttonColor, setButtonColor] = useState('white');\n  const [fullName, setFullName] = useState({\n    fName: '',\n    lName: ''\n  });\n\n  const handleClick = () => {\n    setHeadingText('Clicked!');\n    \n  }\n  \n  const handleMouseOver = () => {\n    setHeadingText('Mouse Over!');\n    setButtonColor('black');\n  }\n\n  const handleMouseOut = () => {\n    setHeadingText('Mouse Out!');\n    setButtonColor('white');\n  }\n\n  const handleNameChange = (e) => {\n    const newValue = e.target.value;\n    const inputName = e.target.name;\n    \n    inputName === 'fName' ?\n      setFullName({fName: newValue, lName: fullName.lName})\n      : setFullName({lName: newValue, fName: fullName.fName})\n  }\n\n  // In HTML, elements are responsible of handling their own state.\n  // For example, if you type in an input element, the value will be\n  // equal to the one that you already typed.\n\n  // In React, however, you have to set the value property to the \n  // Thing you typed manually.\n\n  // Alternative solution for \"onClick={handleClick}\" for button element\n  // would be to wrap entire thing with form element (input and button elements),\n  // replace \"onClick={handleClick}\" with \"type='submit\", then\n  // in form element, as an attribute add this \"onSubmit={handleClick}\"\n  // In this case you have to pass an argument inside \"handleClick(e)\" function,\n  // Inside it write \"e.preventDefault();\"\n\n  return (\n    <div className=\"container\">\n      <h1>Hello {fullName.fName}</h1>\n      <h1>You typed {fullName.fName} {fullName.lName}</h1>\n      <h1>{headingText}</h1>\n      <input \n        type=\"text\"\n        name='fName' \n        placeholder=\"First Name\" \n        onChange={handleNameChange}\n        // value={fullName.fName} \n      />\n\n      <input \n        type=\"text\" \n        name='lName'  \n        placeholder=\"Last Name\" \n        onChange={handleNameChange}\n        // value={fullName.LName} \n      />\n      \n      <button \n        style={{backgroundColor: buttonColor}} \n        onMouseOver={handleMouseOver} \n        onMouseOut={handleMouseOut} \n        onClick={handleClick}>Submit</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}